// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: filesystem/filesystem.proto

package filesystem

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (StorageService_UploadClient, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (StorageService_DownloadClient, error)
	GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (StorageService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], "/filesystem.StorageService/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceUploadClient{stream}
	return x, nil
}

type StorageService_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*UploadFilesystemResponse, error)
	grpc.ClientStream
}

type storageServiceUploadClient struct {
	grpc.ClientStream
}

func (x *storageServiceUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceUploadClient) CloseAndRecv() (*UploadFilesystemResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFilesystemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (StorageService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], "/filesystem.StorageService/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_DownloadClient interface {
	Recv() (*File, error)
	grpc.ClientStream
}

type storageServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *storageServiceDownloadClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) GetManifest(ctx context.Context, in *ManifestRequest, opts ...grpc.CallOption) (*ManifestResponse, error) {
	out := new(ManifestResponse)
	err := c.cc.Invoke(ctx, "/filesystem.StorageService/GetManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	Upload(StorageService_UploadServer) error
	Download(*DownloadRequest, StorageService_DownloadServer) error
	GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) Upload(StorageService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedStorageServiceServer) Download(*DownloadRequest, StorageService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedStorageServiceServer) GetManifest(context.Context, *ManifestRequest) (*ManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).Upload(&storageServiceUploadServer{stream})
}

type StorageService_UploadServer interface {
	SendAndClose(*UploadFilesystemResponse) error
	Recv() (*File, error)
	grpc.ServerStream
}

type storageServiceUploadServer struct {
	grpc.ServerStream
}

func (x *storageServiceUploadServer) SendAndClose(m *UploadFilesystemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).Download(m, &storageServiceDownloadServer{stream})
}

type StorageService_DownloadServer interface {
	Send(*File) error
	grpc.ServerStream
}

type storageServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *storageServiceDownloadServer) Send(m *File) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.StorageService/GetManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetManifest(ctx, req.(*ManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManifest",
			Handler:    _StorageService_GetManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _StorageService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _StorageService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "filesystem/filesystem.proto",
}
